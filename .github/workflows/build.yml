name: build

on:
  workflow_call:
    inputs:
      # TODO check if the entire github context can be sent
      dockerRepository: # docker image repository
        required: true
        type: string
      repository: # github.repository
        required: true
        type: string
      githubSha: # github.sha
        required: true
        type: string
      githubRef: # github.ref
        required: true
        type: string
      githubHeadRef: #github.head_ref for PRs
        required: true
        type: string
      pullRequestNumber:
        required: true
        type: string
    secrets:
      PAT: # github personal access token
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

jobs:
  initialize:
    name: initialize
    runs-on: ubuntu-latest
    outputs:
      dockerTag: ${{ steps.initialize.outputs.dockerTag }}
      branch: ${{ steps.initialize.outputs.branch }}
    steps:
    -
      name: Initialize
      id: initialize
      run: |
        githubHeadRef=${{ inputs.githubHeadRef }}
        dockerTag=""

        # enable case insensitive regex
        # shopt -s nocasematch
        # mainPattern='refs\/heads\/(main)'

        # check if this is a PR or not
        if [[ $githubHeadRef == "" ]];
        then
          # this run is for the main branch
          githubRef=${{ inputs.githubRef }}
          dockerTag="latest"
        else
          # this run is for a PR
          githubRef=$githubHeadRef
          dockerTag="pull-${{ inputs.pullRequestNumber }}"
        fi

        # get branch name from ref
        branch=${githubRef##*/}

        echo "::set-output name=dockerTag::$dockerTag"
        echo "::set-output name=branch::$branch"
  build_app:
    name: build app
    runs-on: ubuntu-latest
    needs: [ initialize ]
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ needs.initialize.outputs.branch }}
          token: ${{ secrets.PAT }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: Build & push docker image
        timeout-minutes: 5
        working-directory: src
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

          sudo docker buildx create --name builder
          sudo docker buildx use builder

          sudo docker buildx build . \
            --file Dockerfile \
            --platform linux/amd64,linux/arm64 \
            --label commit=sha-${{ inputs.githubSha }} \
            -t ${{ inputs.dockerRepository }}:${{ needs.initialize.outputs.dockerTag }} \
            --push