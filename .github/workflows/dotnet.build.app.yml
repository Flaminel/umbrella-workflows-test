name: Dotnet build app

on:
  workflow_call:
    inputs:
      dockerRepository: # docker image repository
        required: true
        type: string
      githubContext: # github context in JSON format
        required: true
        type: string
      executableName:
        required: true
        type: string
        default: Executable
      selfContained:
        required: false
        type: boolean
        default: true
      baseImage:
        required: false
        type: string
        default: 7.0-alpine
    secrets:
      SECRETS_TOKEN:
        required: true

jobs:
  initialize:
    name: Initialize
    runs-on: ubuntu-latest
    outputs:
      latestDockerTag: ${{ steps.initialize.outputs.latestDockerTag }}
      commitDockerTag: ${{ steps.initialize.outputs.commitDockerTag }}
      branch: ${{ steps.initialize.outputs.branch }}
    steps:
      -
        name: Set github context
        timeout-minutes: 1
        run: |
          echo 'githubRepository=${{ fromJSON(inputs.githubContext).repository }}' >> $GITHUB_ENV
          echo 'githubSha=${{ fromJSON(inputs.githubContext).sha }}' >> $GITHUB_ENV
          echo 'githubRef=${{ fromJSON(inputs.githubContext).ref }}' >> $GITHUB_ENV
          echo 'githubHeadRef=${{ fromJSON(inputs.githubContext).head_ref }}' >> $GITHUB_ENV
          echo 'pullRequestNumber=${{ fromJSON(inputs.githubContext).event.pull_request.number }}' >> $GITHUB_ENV
      -
        name: Initialize build info
        timeout-minutes: 1
        id: initialize
        run: |
          githubHeadRef=${{ env.githubHeadRef }}
          latestDockerTag=""
          commitDockerTag=""

          # enable case insensitive regex
          # shopt -s nocasematch
          # mainPattern='refs\/heads\/(main)'

          # check if this is a PR or not
          if [[ $githubHeadRef == "" ]]; then
            # this run is for the main branch
            githubRef=${{ env.githubRef }}
            latestDockerTag="latest"
            commitDockerTag=${{ env.githubSha }}
          else
            # this run is for a PR
            githubRef=$githubHeadRef
            latestDockerTag="pull-${{ env.pullRequestNumber }}"
            commitDockerTag="pull-${{ env.pullRequestNumber }}-${{ env.githubSha }}"
          fi

          # get branch name from ref
          branch=${githubRef##*/}

          echo "latestDockerTag=$latestDockerTag" >> $GITHUB_OUTPUT
          echo "commitDockerTag=$commitDockerTag" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT

  build_app:
    name: Build app
    runs-on: ubuntu-latest
    needs: [ initialize ]
    steps:
      - 
        name: Get secrets
        uses: flaminel/secrets-action@v1
        with:
          access-token: ${{ secrets.SECRETS_TOKEN }}
      -
        name: Checkout target repository
        uses: actions/checkout@v3
        timeout-minutes: 1
        with:
          repository: ${{ env.githubRepository }}
          ref: ${{ needs.initialize.outputs.branch }}
          token: ${{ env.GitHubReadonlyRepoPAT }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        timeout-minutes: 5
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        timeout-minutes: 5
      -
        name: Create Dockerfile
        working-directory: code
        timeout-minutes: 2
        run: |
          # touch Dockerfile

          # echo -e "FROM mcr.microsoft.com/dotnet/sdk:${{ inputs.baseImage }} AS build" >> Dockerfile
          # echo -e "WORKDIR /app" >> Dockerfile
          # echo -e "EXPOSE 80 \n" >> Dockerfile
          # echo -e "COPY . ./ \n" >> Dockerfile
          # echo -e "RUN dotnet publish "./${{ inputs.executableName }}/${{ inputs.executableName }}.csproj" \ " >> Dockerfile
          # echo -e "-c Release \ " >> Dockerfile
          # echo -n "-o /app/publish" >> Dockerfile

          # # TODO selfContained only if main branch
          # if [ "${{ inputs.selfContained }}" = true ] ; then
          #   echo -e " \ " >> Dockerfile
          #   echo -e "--self-contained \ " >> Dockerfile
          #   echo -e "--use-current-runtime \ " >> Dockerfile
          #   echo -e "/p:PublishSingleFile=true \ " >> Dockerfile
          #   echo -e "/p:PublishTrimmed=true \n" >> Dockerfile
          #   echo -e "FROM mcr.microsoft.com/dotnet/runtime-deps:${{ inputs.baseImage }} \n" >> Dockerfile
          #   entrypoint="ENTRYPOINT ./${{ inputs.executableName }}"
          # else
          #   echo -e "" >> Dockerfile
          #   echo -e "FROM mcr.microsoft.com/dotnet/aspnet:${{ inputs.baseImage }} \n" >> Dockerfile
          #   entrypoint="ENTRYPOINT [\"dotnet\", \"${{ inputs.executableName }}.dll\"]"
          # fi

          # echo -e "WORKDIR /app" >> Dockerfile
          # echo -e "COPY --from=build /app/publish ." >> Dockerfile
          # echo -e "${entrypoint}" >> Dockerfile

          # cat Dockerfile

          touch Dockerfile

          echo -e "FROM mcr.microsoft.com/dotnet/sdk:${{ inputs.baseImage }} AS build" >> Dockerfile
          echo -e "WORKDIR /app" >> Dockerfile
          echo -e "EXPOSE 80 \n" >> Dockerfile
          echo -e "COPY . ./ \n" >> Dockerfile

          if [ "${{ inputs.selfContained }}" = true ] ; then
            # TODO remove this workaround for arm64 after https://github.com/dotnet/installer/pull/14647 is closed
            echo -e "ARG architecture=\$(dotnet --info | grep 'Architecture: arm64')" >> Dockerfile
            echo -e "RUN if [[ -z '\$architecture' ]]; then \ " >> Dockerfile
            echo -e "dotnet publish "./${{ inputs.executableName }}/${{ inputs.executableName }}.csproj" \ " >> Dockerfile
            echo -e "-c Release -o /app/publish --self-contained /p:PublishSingleFile=true /p:PublishTrimmed=true --use-current-runtime; \ " >> Dockerfile
            echo -e "else \ " >> Dockerfile
            echo -e "dotnet publish "./${{ inputs.executableName }}/${{ inputs.executableName }}.csproj" \ " >> Dockerfile
            echo -e "-c Release -o /app/publish --self-contained /p:PublishSingleFile=true /p:PublishTrimmed=true -r linux-musl-arm64; \ " >> Dockerfile
            echo -e "fi \n" >> Dockerfile

            echo -e "FROM mcr.microsoft.com/dotnet/runtime-deps:${{ inputs.baseImage }} \n" >> Dockerfile
            entrypoint="ENTRYPOINT ./${{ inputs.executableName }}"
          else
            # TODO remove
            echo -e "RUN dotnet publish "./${{ inputs.executableName }}/${{ inputs.executableName }}.csproj" \ " >> Dockerfile
            echo -e "-c Release \ " >> Dockerfile
            echo -n "-o /app/publish" >> Dockerfile

            echo -e "" >> Dockerfile
            echo -e "FROM mcr.microsoft.com/dotnet/aspnet:${{ inputs.baseImage }} \n" >> Dockerfile
            entrypoint="ENTRYPOINT [\"dotnet\", \"${{ inputs.executableName }}.dll\"]"
          fi

          echo -e "WORKDIR /app" >> Dockerfile
          echo -e "COPY --from=build /app/publish ." >> Dockerfile
          echo -e "${entrypoint}" >> Dockerfile

          cat Dockerfile
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DockerUsername }}
          password: ${{ env.DockerPassword }}
      -
        name: Build and push docker image
        timeout-minutes: 15
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/code
          file: ${{ github.workspace }}/code/Dockerfile
          labels: |
            commit=sha-${{ env.githubSha }}
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            ${{ inputs.dockerRepository }}:${{ needs.initialize.outputs.latestDockerTag }}
            ${{ inputs.dockerRepository }}:${{ needs.initialize.outputs.commitDockerTag }}